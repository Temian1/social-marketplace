// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  bio           String?   @db.Text
  isVerified    Boolean   @default(false)
  isBanned      Boolean   @default(false)
  isSuspended   Boolean   @default(false)
  isAdmin       Boolean   @default(false)
  referralCode  String    @unique @default(cuid())
  referredBy    String?
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts           Account[]
  sessions           Session[]
  listings           Listing[]
  purchases          Transaction[] @relation("BuyerTransactions")
  sales              Transaction[] @relation("SellerTransactions")
  wallet             Wallet?
  sentMessages       Message[]     @relation("SentMessages")
  receivedMessages   Message[]     @relation("ReceivedMessages")
  givenReviews       Review[]      @relation("ReviewerReviews")
  receivedReviews    Review[]      @relation("RevieweeReviews")
  referrals          Referral[]    @relation("ReferrerReferrals")
  referredUsers      Referral[]    @relation("ReferredUserReferrals")
  withdrawalRequests WithdrawalRequest[]
  notifications      Notification[]

  @@index([email])
  @@index([username])
  @@index([referralCode])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Listing {
  id          String        @id @default(cuid())
  userId      String
  title       String
  description String        @db.Text
  niche       String
  type        ListingType
  price       Decimal       @db.Decimal(10, 2)
  screenshots Json?
  status      ListingStatus @default(DRAFT)
  views       Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  reviews      Review[]

  @@index([status])
  @@index([niche])
  @@index([type])
  @@index([price])
  @@index([createdAt])
}

model Transaction {
  id              String          @id @default(cuid())
  listingId       String
  buyerId         String
  sellerId        String
  amount          Decimal         @db.Decimal(10, 2)
  commission      Decimal         @db.Decimal(10, 2)
  escrowStatus    EscrowStatus    @default(PENDING)
  paymentId       String?
  releaseDate     DateTime?
  disputeReason   String?         @db.Text
  deliveryProof   String?         @db.Text
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  listing  Listing   @relation(fields: [listingId], references: [id])
  buyer    User      @relation("BuyerTransactions", fields: [buyerId], references: [id])
  seller   User      @relation("SellerTransactions", fields: [sellerId], references: [id])
  messages Message[]
  reviews  Review[]

  @@index([escrowStatus])
  @@index([createdAt])
}

model Wallet {
  id        String   @id @default(cuid())
  userId    String   @unique
  balance   Decimal  @db.Decimal(10, 2) @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Referral {
  id             String        @id @default(cuid())
  referrerId     String
  referredUserId String
  amountEarned   Decimal       @db.Decimal(10, 2) @default(0)
  status         ReferralStatus @default(PENDING)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  referrer     User @relation("ReferrerReferrals", fields: [referrerId], references: [id])
  referredUser User @relation("ReferredUserReferrals", fields: [referredUserId], references: [id])

  @@unique([referrerId, referredUserId])
}

model WithdrawalRequest {
  id                 String            @id @default(cuid())
  userId             String
  amount             Decimal           @db.Decimal(10, 2)
  status             WithdrawalStatus  @default(PENDING)
  flutterwavePayoutId String?
  rejectionReason    String?           @db.Text
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([status])
  @@index([createdAt])
}

model Review {
  id            String  @id @default(cuid())
  transactionId String
  listingId     String
  reviewerId    String
  revieweeId    String
  rating        Int
  comment       String? @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  transaction Transaction @relation(fields: [transactionId], references: [id])
  listing     Listing     @relation(fields: [listingId], references: [id])
  reviewer    User        @relation("ReviewerReviews", fields: [reviewerId], references: [id])
  reviewee    User        @relation("RevieweeReviews", fields: [revieweeId], references: [id])

  @@unique([transactionId, reviewerId])
}

model Message {
  id            String   @id @default(cuid())
  transactionId String
  senderId      String
  receiverId    String
  content       String   @db.Text
  fileUrl       String?
  isRead        Boolean  @default(false)
  createdAt     DateTime @default(now())

  transaction Transaction @relation(fields: [transactionId], references: [id])
  sender      User        @relation("SentMessages", fields: [senderId], references: [id])
  receiver    User        @relation("ReceivedMessages", fields: [receiverId], references: [id])

  @@index([transactionId])
  @@index([createdAt])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String           @db.Text
  isRead    Boolean          @default(false)
  data      Json?
  createdAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId, isRead])
  @@index([createdAt])
}

model Settings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ListingType {
  GROUP
  CHANNEL
}

enum ListingStatus {
  DRAFT
  PENDING
  ACTIVE
  SOLD
  DEACTIVATED
  REJECTED
}

enum EscrowStatus {
  PENDING
  HELD
  RELEASED
  REFUNDED
  DISPUTED
}

enum ReferralStatus {
  PENDING
  PAID
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSED
}

enum NotificationType {
  LISTING_APPROVED
  LISTING_REJECTED
  PURCHASE_MADE
  PAYMENT_RECEIVED
  MESSAGE_RECEIVED
  WITHDRAWAL_APPROVED
  WITHDRAWAL_REJECTED
  REVIEW_RECEIVED
}
